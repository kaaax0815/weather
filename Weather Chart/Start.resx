<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        rkJggg==
</value>
  </data>
</root>